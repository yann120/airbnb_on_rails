<div class="sticky">
<%= form_for([@room, @room.reservations.new]) do |f| %>
<div class="card">
            <div class="card-content">
                <p><span class="is-size-5 has-text-weight-semibold"><%= @room.price %> €</span> per night</p>
                <hr>
                <div class="field is-horizontal">
                <div class="field-label is-normal">
                    <label class="label">Dates</label>
                </div>
                <div class="field-body">
                    <div class="field">
                    
                    <div class="control is-expanded">
                    <%= f.text_field :start_date, placeholder: "From", class: "input", onChange: "changePrices()", required: true, autocomplete: 'off' %>                        
                    </div>
                    </div>

                    <div class="field">
                    <p class="control is-expanded">
                        <%= f.text_field :end_date, placeholder: "To", class: "input", onChange: "changePrices()", required: true, disabled: true, autocomplete: 'off' %>
                    </p>
                    </div>
                </div>
                </div>
                <div class="field is-horizontal">
                <div class="field-label is-normal">
                    <label class="label">Guests</label>
                </div>
                <div class="field-body">
                    <div class="field">
                    <p class="select">
                    <%= f.select :guests, (1..@room.accommodate).map {|i| [pluralize(i, "guest"),i] }%> 
                    </p>
                    </div>
                </div>
                </div> 
                <div class="columns is-mobile is-marginless">
                    <div class="column is-half has-text-left">
                        <span id="price"><%= @room.price %></span>€ x <span id="nights">1</span> nights
                    </div>
                    <div class="column is-half has-text-right">
                        <span id="total_room_price"><%= @room.price %></span>€
                    </div>
                </div>
                <hr class="is-marginless">
                <div class="columns is-mobile is-marginless">
                    <div class="column is-half has-text-left">
                        Cleaning fees
                    </div>
                    <div class="column is-half has-text-right">
                        <span id="cleaning_fees"><%= (@room.price / 10).round %></span>€
                    </div>
                </div>
                <hr class="is-marginless">
                <div class="columns is-mobile is-marginless">
                    <div class="column is-half has-text-left has-text-weight-semibolt">
                        Total
                    </div>
                    <div class="column is-half has-text-right">
                        <span id="total_price"><%= (@room.price * 1.1).round %></span>€
                    </div>
                </div>
                <%= f.submit "Book Now", class: "button is-medium is-fullwidth is-link has-text-white" %>
            </div>
            <%
=begin%>
 <footer class="card-footer">
                <p class="card-footer-item">
                <span>
                    View on <a href="https://twitter.com/codinghorror/status/506010907021828096">Twitter</a>
                </span>
                </p>
                <p class="card-footer-item">
                <span>
                    Share on <a href="#">Facebook</a>
                </span>
                </p>
            </footer> 
<%
=end%>
</div>
<% end %>
</div>

<script>
    function isEmpty(str) {
        return (!str || 0 === str.length);
    }

    function daysBetween(StartDate, EndDate) {
        const oneDay = 1000 * 60 * 60 * 24;
        const start = Date.UTC(EndDate.getFullYear(), EndDate.getMonth(), EndDate.getDate());
        const end = Date.UTC(StartDate.getFullYear(), StartDate.getMonth(), StartDate.getDate());
        return (start - end) / oneDay;
    }

    function changeDateFormat(datestr) {
        return (datestr.substr(3, 2)+"-"+datestr.substr(0, 2)+"-"+datestr.substr(6, 4));
    }

    function changePrices() {
        console.log("started")
        var start_date = changeDateFormat($("#reservation_start_date").val());
        var end_date = changeDateFormat($("#reservation_end_date").val());
        // console.log(Date.parse(changeDateFormat(start_date)));
        // console.log(Date.parse(changeDateFormat(end_date)));

        if (!isNaN(Date.parse(start_date)) && !isNaN(Date.parse(end_date)))
        {
            console.log("ici");            
            start_date = new Date(start_date);
            end_date = new Date(end_date);
            var nights = daysBetween(start_date, end_date);
            if (nights < 1) {
                nights = 1;
            }

            const price = parseInt($('#price').text())
            $('#nights').text(String(nights));
            $('#total_room_price').text(String(nights * price));
            $('#cleaning_fees').text(String(Math.round((nights * price)*0.1)));
            $('#total_price').text(String(Math.round((nights * price)*1.1)))
        }
    };
     var unavailableDates = [];
     var startDateReservations = [];
    function checkDate(date) {
        dny = date.getDate() + "-" + (date.getMonth() + 1) + "-" + date.getFullYear();
        return [$.inArray(dny, unavailableDates) == -1];
    }

    function maximumDate(date) {
        for(let i = 0; i < startDateReservations.length; i++) {
            if (date < startDateReservations[i]) {
                return startDateReservations[i]
            }
        }
        var newDate = new Date();
        // newDate.setYear(date.getYear())
        newDate.setMonth(date.getMonth() + 3 )
        newDate.setDate(date.getDate())
        console.log(newDate)
        return newDate
    }

    $(function() {
       
        $.ajax({
            url: '<%= preload_room_path(@room) %>',
            dataType: 'json',
            success: function(data) {
                $.each(data, function(arrID, arrValue) {
                    for(var d = new Date(arrValue.start_date); d <= new Date(arrValue.end_date); d.setDate(d.getDate() + 1)) {
                       unavailableDates.push($.datepicker.formatDate('d-m-yy', d));
                    }
                    startDateReservations.push(new Date(arrValue.start_date));
                })
                startDateReservations.sort(function(a,b) {
                    return a - b;
                });
            }
        })
        $.datepicker.setDefaults({
                changeMonth: true,
                dateFormat: 'dd-mm-yy'});
            $('#reservation_start_date').datepicker({
                minDate: '+0',
                beforeShowDay: checkDate,
                onSelect: function(dateStr) {
                    changePrices();
                    var date = $(this).datepicker('getDate');
                    var min = $(this).datepicker('getDate') || new Date(); // Selected date or today if none               
                    var max = maximumDate(min);

                    $('#reservation_end_date').datepicker('option', {minDate: min, maxDate: max});
                    $('#reservation_end_date').attr("disabled", false);
                }
            });
            $('#reservation_end_date').datepicker({
                minDate: '+0',
                maxDate: '+1m',
                beforeShowDay: checkDate,
                onSelect: function(dateStr) {
                    changePrices();
                    var max = $(this).datepicker('getDate'); // Selected date or null if none
                    $('#reservation_start_date').datepicker('option', {maxDate: max});
                }
            });

    })
</script>